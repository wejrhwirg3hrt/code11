// STOMP 简化版本 - 用于WebRTC测试
(function() {
    'use strict';
    
    var Stomp = {};
    
    function Client(ws) {
        this.ws = ws;
        this.connected = false;
        this.subscriptions = {};
        this.counter = 0;
        this.heartbeat = {outgoing: 10000, incoming: 10000};
        this.debug = function() {};
    }
    
    Client.prototype.connect = function(headers, connectCallback, errorCallback) {
        var self = this;
        
        if (typeof headers === 'function') {
            errorCallback = connectCallback;
            connectCallback = headers;
            headers = {};
        }
        
        this.connectCallback = connectCallback;
        this.errorCallback = errorCallback;
        
        this.ws.onopen = function() {
            self.connected = true;
            if (connectCallback) {
                connectCallback({command: 'CONNECTED'});
            }
        };
        
        this.ws.onmessage = function(event) {
            self._handleMessage(event.data);
        };
        
        this.ws.onclose = function(event) {
            self.connected = false;
            if (errorCallback) {
                errorCallback(event);
            }
        };
        
        this.ws.onerror = function(event) {
            if (errorCallback) {
                errorCallback(event);
            }
        };
    };
    
    Client.prototype.disconnect = function(disconnectCallback) {
        this.connected = false;
        if (this.ws) {
            this.ws.close();
        }
        if (disconnectCallback) {
            disconnectCallback();
        }
    };
    
    Client.prototype.send = function(destination, headers, body) {
        headers = headers || {};
        body = body || '';
        
        var message = {
            command: 'SEND',
            destination: destination,
            headers: headers,
            body: body
        };
        
        this._transmit(message);
    };
    
    Client.prototype.subscribe = function(destination, callback, headers) {
        headers = headers || {};
        var id = 'sub-' + this.counter++;
        headers.id = id;
        headers.destination = destination;
        
        this.subscriptions[id] = callback;
        
        this._transmit({
            command: 'SUBSCRIBE',
            headers: headers
        });
        
        return {
            id: id,
            unsubscribe: function() {
                delete this.subscriptions[id];
                this._transmit({
                    command: 'UNSUBSCRIBE',
                    headers: {id: id}
                });
            }.bind(this)
        };
    };
    
    Client.prototype._transmit = function(message) {
        if (this.ws && this.ws.readyState === 1) {
            var data = JSON.stringify(message);
            this.ws.send(data);
        }
    };
    
    Client.prototype._handleMessage = function(data) {
        try {
            var message = JSON.parse(data);
            if (message.command === 'MESSAGE') {
                var subscription = this.subscriptions[message.headers.subscription];
                if (subscription) {
                    subscription(message);
                }
            }
        } catch (e) {
            console.error('Error parsing message:', e);
        }
    };
    
    Stomp.over = function(ws) {
        return new Client(ws);
    };
    
    Stomp.client = function(url) {
        var ws = new SockJS(url);
        return Stomp.over(ws);
    };
    
    // 导出到全局
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = Stomp;
    } else {
        window.Stomp = Stomp;
    }
})();
