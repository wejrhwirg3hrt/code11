// SockJS 简化版本 - 用于WebRTC测试
(function() {
    'use strict';
    
    function SockJS(url, protocols, options) {
        this.url = url;
        this.readyState = SockJS.CONNECTING;
        this.protocol = '';
        this.extensions = '';
        this.bufferedAmount = 0;
        
        var self = this;
        
        // 使用WebSocket作为后备
        try {
            var wsUrl = url.replace(/^http/, 'ws') + '/websocket';
            this._ws = new WebSocket(wsUrl);
            
            this._ws.onopen = function(event) {
                self.readyState = SockJS.OPEN;
                if (self.onopen) {
                    self.onopen(event);
                }
            };
            
            this._ws.onmessage = function(event) {
                if (self.onmessage) {
                    self.onmessage(event);
                }
            };
            
            this._ws.onclose = function(event) {
                self.readyState = SockJS.CLOSED;
                if (self.onclose) {
                    self.onclose(event);
                }
            };
            
            this._ws.onerror = function(event) {
                if (self.onerror) {
                    self.onerror(event);
                }
            };
            
        } catch (e) {
            setTimeout(function() {
                self.readyState = SockJS.CLOSED;
                if (self.onclose) {
                    self.onclose({code: 1006, reason: 'Connection failed', wasClean: false});
                }
            }, 0);
        }
    }
    
    SockJS.CONNECTING = 0;
    SockJS.OPEN = 1;
    SockJS.CLOSING = 2;
    SockJS.CLOSED = 3;
    
    SockJS.prototype.send = function(data) {
        if (this.readyState === SockJS.OPEN && this._ws) {
            this._ws.send(data);
        }
    };
    
    SockJS.prototype.close = function(code, reason) {
        if (this._ws) {
            this._ws.close(code, reason);
        }
    };
    
    // 导出到全局
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = SockJS;
    } else {
        window.SockJS = SockJS;
    }
})();
